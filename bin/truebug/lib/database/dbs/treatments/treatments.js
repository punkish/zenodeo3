const tables = [
    {
        name: 'treatments',
        type: 'normal',
        create: `CREATE TABLE IF NOT EXISTS treatments ( 
    id INTEGER PRIMARY KEY,
    treatmentId TEXT NOT NULL UNIQUE COLLATE NOCASE,
    treatmentTitle TEXT COLLATE NOCASE,
    treatmentVersion INTEGER,
    treatmentDOI TEXT COLLATE NOCASE,
    treatmentLSID TEXT COLLATE NOCASE,
    zenodoDep INTEGER,
    zoobankId TEXT COLLATE NOCASE,
    articleId TEXT COLLATE NOCASE,
    articleTitle TEXT COLLATE NOCASE,
    articleAuthor TEXT COLLATE NOCASE,
    articleDOI TEXT COLLATE NOCASE,
    publicationDate TEXT COLLATE NOCASE,
    journalTitle TEXT COLLATE NOCASE,
    journalYear TEXT COLLATE NOCASE,
    journalVolume TEXT COLLATE NOCASE,
    journalIssue TEXT COLLATE NOCASE,
    pages TEXT COLLATE NOCASE,
    authorityName TEXT COLLATE NOCASE,
    authorityYear TEXT COLLATE NOCASE,
    kingdom TEXT COLLATE NOCASE,
    phylum TEXT COLLATE NOCASE,
    class TEXT COLLATE NOCASE,
    "order" TEXT COLLATE NOCASE,
    family TEXT COLLATE NOCASE,
    genus TEXT COLLATE NOCASE,
    species TEXT COLLATE NOCASE,
    status TEXT COLLATE NOCASE,
    taxonomicNameLabel TEXT COLLATE NOCASE,
    rank TEXT COLLATE NOCASE,
    fulltext TEXT COLLATE NOCASE,
    author TEXT COLLATE NOCASE,
    deleted INTEGER DEFAULT 0,

    -- ms since epoch when record was updated in TB
    updateTime INTEGER DEFAULT NULL,  

    -- ms since epoch when record was entered in TB
    checkinTime INTEGER DEFAULT NULL, 

    -- four digit year of checkinTime
    checkInYear INTEGER GENERATED ALWAYS AS (
        strftime('%Y', datetime(checkinTime/1000, 'unixepoch'))
    ) VIRTUAL, 
    deleted INTEGER DEFAULT 0,

    -- ms since epoch record created in zenodeo
    created INTEGER DEFAULT (
        strftime('%s','now') * 1000
    ),  

    -- ms since epoch record updated in zenodeo
    updated INTEGER 
)`,
        insert: `INSERT INTO treatments (
    treatmentId,
    treatmentTitle,
    treatmentVersion,
    treatmentDOI,
    treatmentLSID,
    zenodoDep,
    zoobankId,
    articleId,
    articleTitle,
    articleAuthor,
    articleDOI,
    publicationDate,
    journalTitle,
    journalYear,
    journalVolume,
    journalIssue,
    pages,
    authorityName,
    authorityYear,
    kingdom,
    phylum,
    class,
    "order",
    family,
    genus,
    species,
    status,
    taxonomicNameLabel,
    rank,
    fulltext,
    author,
    updateTime,
    checkinTime,
    deleted
)
VALUES ( 
    @treatmentId,
    @treatmentTitle,
    @treatmentVersion,
    @treatmentDOI,
    @treatmentLSID,
    @zenodoDep,
    @zoobankId,
    @articleId,
    @articleTitle,
    @articleAuthor,
    @articleDOI,
    @publicationDate,
    @journalTitle,
    @journalYear,
    @journalVolume,
    @journalIssue,
    @pages,
    @authorityName,
    @authorityYear,
    @kingdom,
    @phylum,
    @class,
    @order,
    @family,
    @genus,
    @species,
    @status,
    @taxonomicNameLabel,
    @rank,
    @fulltext,
    @author,
    @updateTime,
    @checkinTime,
    @deleted
)
ON CONFLICT (treatmentId)
DO UPDATE SET
    treatmentTitle=excluded.treatmentTitle,
    treatmentDOI=excluded.treatmentDOI,
    treatmentLSID=excluded.treatmentLSID,
    zenodoDep=excluded.zenodoDep,
    zoobankId=excluded.zoobankId,
    articleId=excluded.articleId,
    articleTitle=excluded.articleTitle,
    articleAuthor=excluded.articleAuthor,
    articleDOI=excluded.articleDOI,
    publicationDate=excluded.publicationDate,
    journalTitle=excluded.journalTitle,
    journalYear=excluded.journalYear,
    journalVolume=excluded.journalVolume,
    journalIssue=excluded.journalIssue,
    pages=excluded.pages,
    authorityName=excluded.authorityName,
    authorityYear=excluded.authorityYear,
    kingdom=excluded.kingdom,
    phylum=excluded.phylum,
    class=excluded.class,
    "order"=excluded."order",
    family=excluded.family,
    genus=excluded.genus,
    species=excluded.species,
    status=excluded.status,
    taxonomicNameLabel=excluded.taxonomicNameLabel,
    rank=excluded.rank,
    fulltext=excluded.fulltext,
    author=excluded.author,
    updateTime=excluded.updateTime,
    checkinTime=excluded.checkinTime,
    deleted=excluded.deleted,
    updated=strftime('%s','now') * 1000`,
        preparedinsert: '',
        data: []
    },
    {
        name: 'vtreatments',
        type: 'virtual',
        create: `CREATE VIRTUAL TABLE IF NOT EXISTS vtreatments USING FTS5(
    treatmentId, 
    fullText
)`,
        insert: `INSERT INTO vtreatments 
SELECT treatmentId, fulltext 
FROM treatments 
WHERE rowid > @maxrowid`,
        preparedinsert: '',
        maxrowid: 0
    }
]

const indexes = [
    `CREATE INDEX IF NOT EXISTS ix_treatments_treatmentId        ON treatments (treatmentId)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_treatmentTitle     ON treatments (treatmentTitle)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_articleTitle       ON treatments (articleTitle)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_publicationDate    ON treatments (publicationDate)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_journalTitle       ON treatments (journalTitle)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_journalYear        ON treatments (journalYear)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_authorityName      ON treatments (authorityName)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_taxonomicNameLabel ON treatments (taxonomicNameLabel)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_kingdom            ON treatments (kingdom)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_phylum             ON treatments (phylum)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_order              ON treatments ("order")`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_family             ON treatments (family)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_genus              ON treatments (genus)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_species            ON treatments (species)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_status             ON treatments (status)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_rank               ON treatments (rank)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_k_phylum           ON treatments (kingdom, phylum)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_k_p_order          ON treatments (kingdom, phylum, "order")`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_k_p_o_family       ON treatments (kingdom, phylum, "order", family)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_k_p_o_f_genus      ON treatments (kingdom, phylum, "order", family, genus)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_k_p_o_f_g_species  ON treatments (kingdom, phylum, "order", family, genus, species)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_facets             ON treatments (treatmentId, journalTitle, journalYear, kingdom, phylum, "order", family, genus, species, status, rank)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_checkinTime        ON treatments (checkinTime)`,
    `CREATE INDEX IF NOT EXISTS ix_treatments_updateTime         ON treatments (updateTime)`,
    //`CREATE INDEX IF NOT EXISTS ix_treatments_deleted            ON treatments ()`,
]

export { tables, indexes }