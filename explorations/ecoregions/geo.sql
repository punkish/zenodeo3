PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE treatments (
        id INTEGER PRIMARY KEY,
        treatment TEXT
    );
QUERY PLAN
`--SCAN treatments
INSERT INTO treatments VALUES(1,'one treatment');
INSERT INTO treatments VALUES(2,'two treatment');
INSERT INTO treatments VALUES(3,'three treatment');
CREATE TABLE materialCitations (
        id INTEGER PRIMARY KEY,
        materialCitation TEXT,
        treatments_id INTEGER NOT NULL REFERENCES treatments(id),
        longitude REAL,
        latitude REAL,
        validGeo BOOLEAN GENERATED ALWAYS AS (
            typeof(latitude) = 'real' AND 
            abs(latitude) < 90 AND 
            typeof(longitude) = 'real' AND 
            abs(longitude) <= 180
        ) STORED,
        ecoregions_id INTEGER REFERENCES ecoregions(id)
    );
QUERY PLAN
`--SCAN materialCitations
INSERT INTO materialCitations VALUES(1,'one materialCitation',1,-3.0,-11.0,NULL);
INSERT INTO materialCitations VALUES(2,'two materialCitation',1,-10.0,-6.0,NULL);
INSERT INTO materialCitations VALUES(3,'three materialCitation',2,-4.0,-6.0,NULL);
INSERT INTO materialCitations VALUES(4,'four materialCitation',3,14.0,5.0,NULL);
INSERT INTO materialCitations VALUES(5,'five materialCitation',2,16.0,10.0,NULL);
INSERT INTO materialCitations VALUES(6,'six materialCitation',2,-160.0,'10a.3f',NULL);
PRAGMA writable_schema=ON;
INSERT INTO sqlite_schema(type,name,tbl_name,rootpage,sql)VALUES('table','materialCitationsGeopoly','materialCitationsGeopoly',0,'CREATE VIRTUAL TABLE materialCitationsGeopoly USING geopoly (
        materialCitations_id,
        treatments_id
    )');
CREATE TABLE IF NOT EXISTS "materialCitationsGeopoly_rowid"(rowid INTEGER PRIMARY KEY,nodeno,a0,a1,a2);
QUERY PLAN
`--SCAN materialCitationsGeopoly_rowid
INSERT INTO materialCitationsGeopoly_rowid VALUES(1,1,X'010000044aa640c0932930c1b6593fc0932930c1b6593fc06dd62fc14aa640c06dd62fc1',1,1);
INSERT INTO materialCitationsGeopoly_rowid VALUES(2,1,X'01000004310020c16200c0c0cfff1fc16200c0c0cfff1fc19effbfc0310020c19effbfc0',2,1);
INSERT INTO materialCitationsGeopoly_rowid VALUES(3,1,X'01000004620080c06200c0c03cff7fc06200c0c03cff7fc09effbfc0620080c09effbfc0',3,2);
INSERT INTO materialCitationsGeopoly_rowid VALUES(4,1,X'010000045aff5f41b4fe9f40a6006041b4fe9f40a60060414c01a0405aff5f414c01a040',4,3);
INSERT INTO materialCitationsGeopoly_rowid VALUES(5,1,X'01000004c8ff7f41c8ff1f411c008041c8ff1f411c00804138002041c8ff7f4138002041',5,2);
CREATE TABLE IF NOT EXISTS "materialCitationsGeopoly_node"(nodeno INTEGER PRIMARY KEY,data);
QUERY PLAN
`--SCAN materialCitationsGeopoly_node
INSERT INTO materialCitationsGeopoly_node VALUES(1,X'000000050000000000000001c040a64ac03f59b6c1302993c12fd66d0000000000000002c1200031c11fffcfc0c00062c0bfff9e0000000000000003c0800062c07fff3cc0c00062c0bfff9e0000000000000004415fff5a416000a6409ffeb440a0014c0000000000000005417fffc84180001c411fffc
CREATE TABLE IF NOT EXISTS "materialCitationsGeopoly_parent"(nodeno INTEGER PRIMARY KEY,parentnode);
QUERY PLAN
`--SCAN materialCitationsGeopoly_parent
CREATE TABLE ecoregions (
        id INTEGER PRIMARY KEY,
        eco_name TEXT,
        biome_name TEXT,
        geometry TEXT
     );
QUERY PLAN
`--SCAN ecoregions
INSERT INTO ecoregions VALUES(1,'one eco','one biome','[[-25,4],[-16,12],[10,11],[-3,3],[-25,4]]');
INSERT INTO ecoregions VALUES(2,'two eco','two biome','[[10,11],[24,2],[23,-10],[11,-7],[-3,3],[10,11]]');
INSERT INTO ecoregions VALUES(3,'three eco','two biome','[[11,-7],[-18,-12],[-25,4],[3,3],[11,-7]]');
INSERT INTO sqlite_schema(type,name,tbl_name,rootpage,sql)VALUES('table','ecoregionsGeopoly','ecoregionsGeopoly',0,'CREATE VIRTUAL TABLE ecoregionsGeopoly USING geopoly(
        ecoregions_id
    )');
CREATE TABLE IF NOT EXISTS "ecoregionsGeopoly_rowid"(rowid INTEGER PRIMARY KEY,nodeno,a0,a1);
QUERY PLAN
`--SCAN ecoregionsGeopoly_rowid
INSERT INTO ecoregionsGeopoly_rowid VALUES(1,1,X'010000040000c8c100008040000080c1000040410000204100003041000040c000004040',1);
INSERT INTO ecoregionsGeopoly_rowid VALUES(2,1,X'0100000500002041000030410000c041000000400000b841000020c1000030410000e0c0000040c000004040',2);
INSERT INTO ecoregionsGeopoly_rowid VALUES(3,1,X'01000004000030410000e0c0000090c1000040c10000c8c1000080400000404000004040',3);
CREATE TABLE IF NOT EXISTS "ecoregionsGeopoly_node"(nodeno INTEGER PRIMARY KEY,data);
QUERY PLAN
`--SCAN ecoregionsGeopoly_node
INSERT INTO ecoregionsGeopoly_node VALUES(1,X'000000030000000000000001c1c800004120000040400000414000000000000000000002c040000041c00000c1200000413000000000000000000003c1c8000041300000c
CREATE TABLE IF NOT EXISTS "ecoregionsGeopoly_parent"(nodeno INTEGER PRIMARY KEY,parentnode);
QUERY PLAN
`--SCAN ecoregionsGeopoly_parent
CREATE TRIGGER mc_loc_afterInsert 
    AFTER INSERT ON materialCitations 
    WHEN new.validGeo = 1
    BEGIN
    
        -- insert new entry in geopoly table
        INSERT INTO materialCitationsGeopoly (
            _shape,
            materialCitations_id,
            treatments_id
        ) 
        VALUES (
    
            -- shape
            geopoly_bbox(
                geopoly_regular(
                    new.longitude, 
                    new.latitude, 
    
                    -- 5 meters in degrees at given latitude
                    abs(5/(40075017*cos(new.latitude)/360)),
    
                    -- num of sides of poly
                    4
                )
            ),
            new.id,
            new.treatments_id
        );

        -- update 'ecoregions_id' column
        UPDATE materialCitations
        SET ecoregions_id = (
            SELECT e.ecoregions_id 
            FROM ecoregionsGeopoly e
            WHERE geopoly_contains_point(e._shape, new.longitude, new.latitude)
        );
    END
;
CREATE TRIGGER er_geom_afterInsert 
    AFTER INSERT ON ecoregions 
    BEGIN
    
        -- insert new entry in geopoly table
        INSERT INTO ecoregionsGeopoly (
            _shape,
            ecoregions_id
        ) 
        VALUES (
    
            -- shape
            new.geometry,
            new.id
        );
    END
;
PRAGMA writable_schema=OFF;
COMMIT;
